package {{.Model.Ident.Singularize.ToLower}}

import (
	"encoding/json"
	"errors"
    "os"

	"github.com/gobuffalo/flect"
	"github.com/guregu/dynamo"

    "github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"

    {{ range $i := .Model.Imports -}}
    "{{$i}}"
    {{ end -}}
)

{{.Model.String}}

// Helper functions to connect to the database (change if you like)
func connect() dynamo.Table {
	return connectWithResource("{{.Model.Ident.Singularize.Camelize}}")
}

func connectWithResource(resource string) dynamo.Table {
	sess := session.New()
	conf := &aws.Config{}

	tableName, mode := getTableNameAndMode(resource)
	if len(mode) > 0 { 
		conf = &aws.Config{
			Endpoint: aws.String("http://dynamodb:8000"),
			Region:   aws.String("eu-central-1"),
		}
	}

	return dynamo.New(sess, conf).Table(tableName)
}

func getTableNameAndMode(resource string) (tableName string, mode string) {
	ident := flect.New(resource)
	tableName = os.Getenv(ident.Singularize().ToUpper().String() + "_TABLE_NAME")

	if len(tableName) == 0 {
		mode = os.Getenv("MODE")
		if len(mode) == 0 {
			mode = "test"
		}
		tableName = "dojo-api-" + ident.Pluralize().Camelize().String() + "-" + mode
	}

	return tableName, mode
}

// Unmarshal returns a new {{.Model.Type}} from a string
func Unmarshal(body string) ({{.Model.Type}}, error) {
	{{.Model.Ident.Singularize.Camelize}} := {{.Model.Type}}{}
	err := json.Unmarshal([]byte(body), &{{.Model.Ident.Singularize.Camelize}})

	return {{.Model.Ident.Singularize.Camelize}}, err
}

// Marshal returns the JSON string for a slice of {{.Model.Ident.Pluralize.Pascalize}}
func Marshal({{.Model.Ident.Pluralize.Camelize}} []{{.Model.Type}}) string {
	jsonItem, err := json.Marshal({{.Model.Ident.Pluralize.Camelize}})
	if err != nil {
		panic(err.Error())
	}

	return string(jsonItem)
}

// Marshal return the JSON string for the {{.Model.Type}}
func ({{.Model.Ident.Singularize.Camelize}} {{.Model.Type}}) Marshal() string {
	jsonItem, err := json.Marshal({{.Model.Ident.Singularize.Camelize}})
	if err != nil {
		panic(err.Error())
	}

	return string(jsonItem)
}

// Put writes the {{.Model.Type}} to the database
func ({{.Model.Ident.Singularize.Camelize}} {{.Model.Type}}) Put() error {
	return connect().Put({{.Model.Ident.Singularize.Camelize}}).Run()
}

// Delete removes the {{.Model.Type}} from the database
func ({{.Model.Ident.Singularize.Camelize}} {{.Model.Type}}) Delete() error {
	return connect().Delete("{{ Underscore (index .Model.KeySchema "HASH") }}", {{.Model.Ident.Singularize.Camelize}}.{{ Pascalize (index .Model.KeySchema "HASH") }}).
		{{ if .Model.CompositeKey -}}
		Range("{{ Underscore (index .Model.KeySchema "RANGE") }}", {{.Model.Ident.Singularize.Camelize}}.{{ Pascalize (index .Model.KeySchema "RANGE") }}).
		{{- end -}}
		Run()
}

// Read gets the {{.Model.Type}} from DynamoDB
func Read({{ (index .Model.KeySchema "HASH") }}{{ if .Model.CompositeKey }}, {{ (index .Model.KeySchema "RANGE") }}{{ end }} string) ({{.Model.Type}}, error) {
	var {{.Model.Ident.Camelize}} {{.Model.Type}}
	err := connect().Get("{{ Underscore (index .Model.KeySchema "HASH") }}", {{ (index .Model.KeySchema "HASH") }}).
		{{ if .Model.CompositeKey -}}
		Range("{{ Underscore (index .Model.KeySchema "RANGE") }}", dynamo.Equal, {{ (index .Model.KeySchema "RANGE") }}).
		{{- end }}
		One(&{{.Model.Ident.Camelize}})

	// check whether actual object is found
	if len({{.Model.Ident.Camelize}}.{{ Pascalize (index .Model.KeySchema "HASH") }}) == 0 {
		// nothing found
		msg := "Not able to find {{.Model.Ident.Camelize}} with {{index .Model.KeySchema "HASH"}} " + {{ (index .Model.KeySchema "HASH") }} {{ if .Model.CompositeKey }}+ " and {{index .Model.KeySchema "RANGE"}} " + {{ (index .Model.KeySchema "RANGE") }}{{ end }}
		return {{.Model.Ident.Camelize}}, errors.New(msg)
	}

	return {{.Model.Ident.Camelize}}, err
}

// Delete erases the {{.Model.Type}} from DynamoDB
func Delete({{ (index .Model.KeySchema "HASH") }}{{ if .Model.CompositeKey }}, {{ (index .Model.KeySchema "RANGE") }}{{ end }} string) error {
    {{.Model.Ident.Singularize.Camelize}} := {{.Model.Type}}{
		{{Pascalize (index .Model.KeySchema "HASH") }}: {{ (index .Model.KeySchema "HASH") }},
		{{ if .Model.CompositeKey -}}
		{{Pascalize (index .Model.KeySchema "RANGE") }}: {{ (index .Model.KeySchema "RANGE") }},
		{{ end -}}
	}

	return {{.Model.Ident.Singularize.Camelize}}.Delete()
}

// List returns the {{.Model.Ident.Pluralize.Capitalize}} from DynamoDB
func List() ([]{{.Model.Type}}, error){
	var {{ .Model.Ident.Pluralize.Camelize }} []{{.Model.Type}}
	err := connect().Scan().All(&{{ .Model.Ident.Pluralize.Camelize }})
    
	return {{ .Model.Ident.Pluralize.Camelize }}, err
}

// Helper function for batch operations (change if you like)
// consider the batch limits though (see https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html)
func batch{{.Model.Ident.Pluralize.Pascalize}}({{.Model.Ident.Pluralize.Camelize}} []{{.Model.Type}}, batchSize int) [][]interface{} {
	// clone initial slice
	tmp := make([]interface{}, len({{.Model.Ident.Pluralize.Camelize}}))
	for i, {{.Model.Ident.Singularize.Camelize}} := range {{.Model.Ident.Pluralize.Camelize}} {
		tmp[i] = {{.Model.Ident.Singularize.Camelize}}
	}

	return batch(tmp, batchSize)
}

func batch(in []interface{}, batchSize int) (out [][]interface{}) {
	// split in batches
	for batchSize < len(in) {
		in, out = in[batchSize:], append(out, in[0:batchSize:batchSize])
	}
	out = append(out, in)

	return out
}