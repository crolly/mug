package {{.Model.Ident.Singularize.ToLower}}

import (
	"encoding/json"
	"errors"
	"fmt"
    "os"

    "github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"

    {{ range $i := .Model.Imports -}}
    "{{$i}}"
    {{ end -}}
)

{{.Model.String}}

func connectDB() (*dynamodb.DynamoDB, string) {
	var sess *session.Session
	tableName := os.Getenv("{{.Model.Ident.ToUpper}}_TABLE_NAME")

	if len(tableName) > 0 {
		sess = session.Must(session.NewSession())
	} else {
		sess = session.Must(session.NewSession(&aws.Config{
			Endpoint: aws.String("http://dynamodb:8000"),
			Region:   aws.String("{{.Config.Region}}"),
		}))
		mode := os.Getenv("MODE")
		if len(mode) == 0 {
			mode = "test"
		}
		tableName = "{{.Config.ProjectName}}-{{.Model.Ident.Pluralize.ToLower}}-" + mode
	}

	return dynamodb.New(sess), tableName
}

// Unmarshal returns a new {{.Model.Type}} from a string
func Unmarshal(body string) ({{.Model.Type}}, error) {
	{{.Model.Ident.Singularize.Camelize}} := {{.Model.Type}}{}
	err := json.Unmarshal([]byte(body), &{{.Model.Ident.Singularize.Camelize}})

	return {{.Model.Ident.Singularize.Camelize}}, err
}

// Marshal returns the JSON string for a slice of {{.Model.Ident.Pluralize.Pascalize}}
func Marshal({{.Model.Ident.Pluralize.Camelize}} []{{.Model.Type}}) string {
	jsonItem, err := json.Marshal({{.Model.Ident.Pluralize.Camelize}})
	if err != nil {
		panic(err.Error())
	}

	return string(jsonItem)
}

// Marshal return the JSON string for the {{.Model.Type}}
func ({{.Model.Ident.Singularize.Camelize}} {{.Model.Type}}) Marshal() string {
	jsonItem, err := json.Marshal({{.Model.Ident.Singularize.Camelize}})
	if err != nil {
		panic(err.Error())
	}

	return string(jsonItem)
}

// Put writes the {{.Model.Type}} to the database
func ({{.Model.Ident.Singularize.Camelize}} {{.Model.Type}}) Put() error {
	svc, tableName := connectDB()
	// Marshall the Item into a Map DynamoDB can deal with
	av, err := dynamodbattribute.MarshalMap({{.Model.Ident.Singularize.Camelize}})
	if err != nil {
		fmt.Println("Got error marshalling map:", err.Error())
		return err
	}

	// Create Item in table and return
	input := &dynamodb.PutItemInput{
		Item:      av,
		TableName: aws.String(tableName),
	}

	_, err = svc.PutItem(input)

	return err
}

// Delete removes the {{.Model.Type}} from the database
func ({{.Model.Ident.Singularize.Camelize}} {{.Model.Type}}) Delete() error {
	svc, tableName := connectDB()

	// Perform the delete
	input := &dynamodb.DeleteItemInput{
		Key: map[string]*dynamodb.AttributeValue{
			"{{ Underscore (index .Model.KeySchema "HASH") }}": {
				S: aws.String({{.Model.Ident.Singularize.Camelize}}.{{ Pascalize (index .Model.KeySchema "HASH") }}),
			},
			{{ if .Model.CompositeKey -}}
			"{{ Underscore (index .Model.KeySchema "RANGE") }}": {
				S: aws.String({{.Model.Ident.Singularize.Camelize}}.{{ Pascalize (index .Model.KeySchema "RANGE") }}),
			},
			{{ end -}}
		},
		TableName: aws.String(tableName),
	}

	_, err := svc.DeleteItem(input)
	if err != nil {
		fmt.Println(err.Error())
		return err
	}
	return nil
}

// Read gets the {{.Model.Type}} from DynamoDB
{{ if .Model.CompositeKey -}}
func Read(hashKey, rangeKey string) ({{.Model.Type}}, error) {
{{ else -}}
func Read(id string) ({{.Model.Type}}, error) {
{{ end -}}
    svc, tableName := connectDB()
	{{.Model.Ident.Camelize}} := {{.Model.Type}}{}

	// Perform the query
	fmt.Println("Trying to read from table: ", tableName)
	result, err := svc.GetItem(&dynamodb.GetItemInput{
		TableName: aws.String(tableName),
		Key: map[string]*dynamodb.AttributeValue{
			"{{ Underscore (index .Model.KeySchema "HASH") }}": {
				S: aws.String({{if .Model.CompositeKey}}hashKey{{else}}id{{end}}),
			},
			{{ if .Model.CompositeKey -}}
			"{{ Underscore (index .Model.KeySchema "RANGE") }}": {
				S: aws.String(rangeKey),
			},
			{{ end -}}
		},
	})
	if err != nil {
		fmt.Println(err.Error())
		return {{.Model.Ident.Camelize}}, err
	}

	// Unmarshall the result in to an Item
	err = dynamodbattribute.UnmarshalMap(result.Item, &{{.Model.Ident.Camelize}})
	if err != nil {
		fmt.Println(err.Error())
		return {{.Model.Ident.Camelize}}, err
	}

	// check whether actual object is found
	if len({{.Model.Ident.Camelize}}.{{ Pascalize (index .Model.KeySchema "HASH") }}) == 0 {
		// nothing found
		{{ if .Model.CompositeKey -}}
		msg := "Not able to find {{.Model.Ident.Camelize}} with {{index .Model.KeySchema "HASH"}} " + hashKey + " and {{index .Model.KeySchema "RANGE"}} " + rangeKey
		{{- else -}}
		msg := "Not able to find {{.Model.Ident.Camelize}} with {{index .Model.KeySchema "HASH"}}: " + id
		{{- end }}
		return {{.Model.Ident.Camelize}}, errors.New(msg)
	}

	return {{.Model.Ident.Camelize}}, nil
}

// Delete erases the {{.Model.Type}} from DynamoDB
{{ if .Model.CompositeKey -}}
func Delete(hashKey, rangeKey string) error {
{{ else -}}
func Delete(id string) error {
{{ end -}}
    {{.Model.Ident.Singularize.Camelize}} := {{.Model.Type}}{
		{{ if .Model.CompositeKey -}}
		{{Pascalize (index .Model.KeySchema "HASH") }}: hashKey,
		{{Pascalize (index .Model.KeySchema "RANGE") }}: rangeKey,
		{{ else -}}
		{{Pascalize (index .Model.KeySchema "HASH") }}: id,
		{{ end -}}
	}

	return {{.Model.Ident.Singularize.Camelize}}.Delete()
}

// List returns the {{.Model.Ident.Pluralize.Capitalize}} from DynamoDB
func List() ([]{{.Model.Type}}, error){
    svc, tableName := connectDB()

    params := &dynamodb.ScanInput{
        TableName: aws.String(tableName),
    }
    result, err := svc.Scan(params)
    if err != nil {
        fmt.Println(err.Error())
        return nil, err
    } 

   var {{.Model.Ident.Pluralize}} []{{.Model.Type}}
   dynamodbattribute.UnmarshalListOfMaps(result.Items, &{{.Model.Ident.Pluralize}}) 
   if err != nil {
       fmt.Println(err.Error())
       return nil, err
   }

   return {{.Model.Ident.Pluralize}}, nil 
}