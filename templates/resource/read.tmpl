package main

import (
	"encoding/json"
	"fmt"
	
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
	{{ if .Model.GeneratedID }}"github.com/gofrs/uuid"{{ end }}

	"{{.Config.ImportPath}}/functions/{{.Model.Ident.Singularize.ToLower}}"
)

// ReadHandler handles the GET request to retrieve a {{.Model.Ident.Camelize}} from the database returning it on success
func ReadHandler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	// Pass the call to the model with params found in the path
	{{ if .Model.CompositeKey -}}
	hashKey := request.PathParameters["hash"]
	rangeKey := request.PathParameters["range"]
	fmt.Printf("Path vars: %s, %s", hashKey, rangeKey)
	{{.Model.Ident.Camelize}}, err := {{.Model.Ident.Singularize.ToLower}}.Read(hashKey, rangeKey)
	{{ else -}}
	{{index .Model.KeySchema "HASH"}} := request.PathParameters["{{index .Model.KeySchema "HASH"}}"]
	fmt.Println("Path vars: ", {{index .Model.KeySchema "HASH"}})
	{{.Model.Ident.Camelize}}, err := {{.Model.Ident.Singularize.ToLower}}.Read({{index .Model.KeySchema "HASH"}})
	{{ end -}}
	if err != nil {
		panic(fmt.Sprintf("Failed to find {{.Model.Ident.Camelize}}, %v", err))
	}

	{{ if .Model.GeneratedID -}}
	// Make sure the {{.Model.Ident.Camelize}} isn't empty
	if uuid.Must(uuid.FromString({{.Model.Ident.Camelize}}.ID)) == uuid.Nil {
		fmt.Println("Could not find {{.Model.Ident.Camelize}}")
		return events.APIGatewayProxyResponse{Body: request.Body, StatusCode: 500}, nil
	}
	{{- end }}

	// Log and return result
	jsonItem, _ := json.MarshalIndent({{.Model.Ident.Camelize}}, "", "  ")
	stringItem := string(jsonItem)
	fmt.Println("Found item: ", stringItem)
	return events.APIGatewayProxyResponse{
		Headers: map[string]string{
			"Content-Type":                "application/json",
			"Access-Control-Allow-Origin": "*",
		},
		Body:       stringItem,
		StatusCode: 200,
	}, nil
}

func main() {
	lambda.Start(ReadHandler)
}