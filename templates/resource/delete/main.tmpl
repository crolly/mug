package main

import (
	"fmt"
	
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"

	"{{.Config.ImportPath}}/functions/{{.Model.Ident.Singularize.ToLower}}"
)

var headers = map[string]string{
	"Content-Type":                     "application/json",
	"Access-Control-Allow-Origin":      "*",
	"Access-Control-Expose-Headers":    "Access-Control-Allow-Origin",
	"Access-Control-Allow-Credentials": "true",
	"Access-Control-Allow-Methods":     "GET,PUT,POST,DELETE,PATCH,OPTIONS",
}

// DeleteHandler handles the DELETE request and delete the {{.Model.Ident.Camelize}} by given id
func DeleteHandler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	// Pass the call to the model with params found in the path
	{{ if .Model.CompositeKey -}}
	hashKey := request.PathParameters["{{index .Model.KeySchema "HASH"}}"]
	rangeKey := request.PathParameters["{{index .Model.KeySchema "RANGE"}}"]
	fmt.Printf("Path vars: %s, %s", hashKey, rangeKey)
	err := {{.Model.Ident.Singularize.ToLower}}.Delete(hashKey, rangeKey)
	{{ else -}}
	{{index .Model.KeySchema "HASH"}} := request.PathParameters["{{index .Model.KeySchema "HASH"}}"]
	fmt.Println("Path vars: ", {{index .Model.KeySchema "HASH"}})
	err := {{.Model.Ident.Singularize.ToLower}}.Delete({{index .Model.KeySchema "HASH"}})
	{{ end -}}
	if err != nil {
		msg := fmt.Sprintf("Failed to find {{.Model.Ident.Camelize}}, %v\n", err.Error())
		return events.APIGatewayProxyResponse{Headers: headers, Body: msg, StatusCode: 400}, nil
	}

	msg := "Deleted {{.Model.Ident.Camelize}} \n"
	return events.APIGatewayProxyResponse{
		Headers: 		headers,
		Body:       msg,
		StatusCode: 200,
	}, nil
}

func main() {
	lambda.Start(DeleteHandler)
}